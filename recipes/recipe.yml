---
# yaml-language-server: $schema=https://schema.blue-build.org/recipe-v1.json
# image will be published to ghcr.io/<user>/<name>
name: template
# description will be included in the image's metadata
description: This is my personal OS image.

# the base image to build on top of (FROM) and the version tag to use
base-image: ghcr.io/ublue-os/bazzite-deck
image-version: 42 # latest is also supported if you want new updates ASAP

# module configuration, executed in order
# you can include multiple instances of the same module
modules:
  - type: files
    files:
      - source: system
        destination: / # copies files/system/* (* means everything inside it) into your image's root folder /

  - type: dnf
    repos:
      copr:
        - atim/starship
    install:
      packages:
        - micro
        - starship
    remove:
      packages:
        # example: removing firefox (in favor of the flatpak)
        # "firefox" is the main package, "firefox-langpacks" is a dependency
        - firefox
        - firefox-langpacks # also remove firefox dependency (not required for all packages, this is a special case)

  - type: default-flatpaks
    configurations:
      - notify: true # Send notification after install/uninstall is finished (true/false)
        scope: system
        # If no repo information is specified, Flathub will be used by default
        install: # system flatpaks we want all users to have and not remove
          - org.mozilla.firefox
          - org.gnome.Loupe
      - scope: user # Also add Flathub user repo, but no user packages

  - type: signing # this sets up the proper policy & signing files for signed images to work fully
  - type: containerfile
    snippets:
      # 1단계: *** 여기가 수정된 부분입니다 ***
      # git 대신 curl과 unzip을 설치합니다.
      - RUN rpm-ostree install -y kernel-modules kernel-devel gcc make curl unzip

  - type: containerfile
    snippets:
      # 2단계: git clone 대신 curl로 ZIP을 다운로드하여 빌드합니다.
      - |
        RUN set -eux && \
            # 각 패키지의 버전을 따로 찾습니다.
            KVER_MOD=$(rpm -q kernel-modules --queryformat '%{VERSION}-%{RELEASE}.%{ARCH}') && \
            KVER_DEVEL=$(rpm -q kernel-devel --queryformat '%{VERSION}-%{RELEASE}.%{ARCH}') && \
            echo "--- Found Kernel-Modules Version: ${KVER_MOD} ---" && \
            echo "--- Found Kernel-Devel Version: ${KVER_DEVEL} ---" && \
            
            # 빌드 경로는 kernel-devel 버전을 사용합니다.
            KDIR="/usr/src/kernels/${KVER_DEVEL}" && \
            echo "--- Using Kernel Build Path: ${KDIR} ---" && \
            
            # 두 경로가 모두 존재하는지 확인합니다.
            ls -ld ${KDIR} && \
            ls -ld /lib/modules/${KVER_MOD} && \
            
            # *** 여기가 수정된 부분입니다 ***
            # git clone 대신 curl로 ZIP 파일을 다운로드합니다.
            curl -L https://github.com/morrownr/rtl8852bu/archive/refs/heads/main.zip -o /tmp/rtl8852bu.zip && \
            unzip /tmp/rtl8852bu.zip -d /tmp && \
            # 압축 해제된 폴더로 이동합니다. (폴더 이름이 '...-main'일 것입니다)
            cd /tmp/rtl8852bu-main && \
            
            # KDIR(devel) 경로로 빌드합니다.
            make -C ${KDIR} M=$(pwd) modules && \
            make -C ${KDIR} M=$(pwd) install && \
            
            # depmod는 KVER_MOD(modules) 버전으로 실행합니다.
            depmod -a ${KVER_MOD} && \
            
            # 임시 파일/폴더를 삭제합니다.
            rm -rf /tmp/rtl8852bu-main /tmp/rtl8852bu.zip
